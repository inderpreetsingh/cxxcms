** A reference of STL and other C++ features can be found at cppreference.com and cplusplus.com

** Query String parser-

This page has the specifications of the query string, http://en.wikipedia.org/wiki/Query_string and rfc1738.txt, present in docs directory.

What we need to do is, write a query string parser class, which will break the inputted query string into pieces,
and we'll have a STL Map as output.

The map will be of this sort: std::map<std::string, std::string> and as you might be knowing already, we've to use std::pair to access the elements. Also take a note that, all 
hexadecimal characters should be decoded into ASCII equivalents before inserting them into the final std::map. And to avoid memory leak problems, please use std::auto_ptr 
whereever possible. Auto_ptr cannot be used with arrays and hence if you use dynamic arrays then do make it a point to include delete[] in the class destructor. The other option 
would be to use std::vector. But we cannot use vector at all times, for example the Exception class now uses dynamic char* messages.

*Take a note of all possible flaws that can be caused by various delimiters in the query string, for example:

Many old browsers pass the GET-query string as a=b&&c=d. So the first sanitization task should be to replace all double ampersands with single ampersand. All the replacement tasks
can be accomplished using the BOOST_REGEX library or the pcrecpp library (man page available). PcreCPP is more preferable for this use. For UTF-8 compatibility, do turn on 
pcrecpp's utf8 option before conducting and search/replace operation.

** Header class-

We've to design a header class, which will take care of header manipulation and parsing.
Header manipulation and parsing includes cookies, modified, cache-control, etc.

RFC for Header: http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html, rfc2616.txt, present in the docs directory.

** Request/Response classes-

Request is the details that come with the incoming request, like cookies, query string, POST data, etc. 
The parsing will be done by Query String and Header classes and any other components that we may require. And finally, the Response class's properties and methods will be used in
the program. Request object will be global, and be created for every request in main() with the request body.

The Response class is exactly the opposite of the Request class. We'll provide the parameters, and it will generate the whole page body, including cookies, modified, cache, etc.
It will have a stringstream object, which will store the body. The object will be then used in main() to call printf() defined in fcgi_stdio.h
